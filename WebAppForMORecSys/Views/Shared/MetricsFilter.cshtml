@model WebAppForMORecSys.Models.ViewModels.MetricsFilterViewModel
@using WebAppForMORecSys.Settings;
@using WebAppForMORecSys.Helpers;

<div style="display:flex; text-align:center; justify-content:center">
    <a class="btn btn-warning" id="metricsfilterhelper" data-bs-toggle="modal" data-bs-target="#userMetricModal"
    href="javascript:void(0;)">
        What is the purpose of this filter and how should I use it?
    </a>
</div>
<br />
<div class="input-group" id="input-metrics-group" style="font-size: 1.3vw ;">
    @{
        int index = 0;
    }
    @foreach (Metric metric in Model.Metrics.Keys)
        {
            string id = "range" + index;        
            string valueAsNumber = id + ".valueAsNumber";
            string margin = "";
            if (index == 0)
                margin = "margin-left:auto;";
            else if (index == Model.Metrics.Keys.Count - 1) {
                margin = "margin-right:auto;";
        }
        
        @if (Model.User.GetMetricsView() == MetricsView.DragAndDrop)
            {

                <div draggable="true" id="@("drag_" +@index)" class="drag box dragbox"
                 style="background-color: @Model.User.GetMetricIDsToColors()[metric.Id] ; width: @(100/Model.Metrics.Count - 5)%; 
                    border-radius:0.5em; @margin">
                @if (metric.HasVariants()){
                    <a title="Set how to compute @metric.Name" data-bs-toggle="modal" data-bs-target="#userMetricModal" href="javascript:void(0;)"
                    style="color:white;" data-bs-metricid="@metric.Id">@metric.Name</a>
                }
                else
                {
                    @metric.Name
                }
                    <input class="custom-range range" type="hidden" min="0" max="100" name="MetricsImportance" id="@id"
                           value="@Model.Metrics[metric]" placeholder="MetricsImportance" />
                </div>
                
            }
        else if (Model.User.GetMetricsView() == MetricsView.PlusMinusButtons)
            {
                <div style="width:100%">
                <span class="btn btn-light progressbutton" style="border-color:  @Model.User.GetColors()[index]"
                                onclick="decrease(@index)"><b>-</b></span>
                <span id="@("box_" +@index)" class="box progressbox"
                     style="">
                    @if (metric.HasVariants())
                    {
                        <a title="Set how to compute @metric.Name" data-bs-toggle="modal" data-bs-target="#userMetricModal" href="javascript:void(0;)"
                           style="color:unset" data-bs-metricid="@metric.Id">@metric.Name</a>
                    }
                    else
                    {
                        @metric.Name
                    }
                    <input class="" type="hidden" min="0" max="100" name="MetricsImportance" id="@id"
                    value="@Model.Metrics[metric]" placeholder="MetricsImportance" />
                </span>
                <span class="btn btn-dark progressbutton" style="background-color: @Model.User.GetColors()[index]"
                                onclick="increase(@index)"><b>+</b></span>
                </div>
            }
            else
            {
            <div class="range-wrap" style="color: @Model.User.GetColors()[index]; max-width: @(100 / Model.Metrics.Count - 3)% ">
                    @if (Model.User.GetMetricsView() == MetricsView.Sliders)
                    {
                    <label for="@id">
                        @if (metric.HasVariants())
                        {
                            <a title="Set how to compute @metric.Name" data-bs-toggle="modal" data-bs-target="#userMetricModal" href="javascript:void(0;)"
                               style="color:@Model.User.GetColors()[index];" data-bs-metricid="@metric.Id">@metric.Name</a>
                        }
                        else
                        {
                            @metric.Name
                        }
                    </label>
                    <input class="custom-range range" type="range" min="0" max="100" name="MetricsImportance" id="@id"
                           value="@Model.Metrics[metric]" placeholder="MetricsImportance" oninput="changeValues(this.value, @index)"
                           
                        onchange="changeValues(this.value, @index)" />
                    <output style="background-color: @Model.User.GetColors()[index]" class="bubble"></output>
                    }
                @if (Model.User.GetMetricsView() == MetricsView.TextBoxNumbers)
                    {
                    <label for="@id">
                        @if (metric.HasVariants())
                        {
                            <a title="Set how to compute @metric.Name" data-bs-toggle="modal" data-bs-target="#userMetricModal" href="javascript:void(0;)"
                               style="color:@Model.User.GetColors()[index]" data-bs-metricid="@metric.Id">@metric.Name</a>
                        }
                        else
                        {
                            @metric.Name
                        }
                    </label>
                    <input class="custom-range range form-control rounded m-3" required type="number" min="0" max="100" name="MetricsImportance" id="@id"
                           value="@Model.Metrics[metric]"  oninput="changeValues(this.value, @index)"
                           onchange="changeValues(this.value, @index)"
                           style="border: 3px solid @Model.User.GetColors()[index];" />
                    }

                </div>
            }
            index++;
    }
    <!-- Modal for setting type of metric -->
    <div class="modal fade" id="userMetricModal" tabindex="-1" aria-labelledby="userMetricLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="userMetricLabel"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="userMetricModalBody">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    /* Make sliders responsive to change of value */

    /* Computes sum of values set to the merics*/
    function getSumOfRangeValues() {
        let inputranges = document.getElementById("input-metrics-group").getElementsByTagName('input');
        let length = inputranges.length;
        let sum = 0;
        for (let i = 0; i < length; i++) {
            sum += parseInt(inputranges[i].value)
        }
        return sum;
    }

    function getRandomInt(max) {
        return Math.floor(Math.random() * max);
    }

    /* When + and - buttons are used, the next 2 methods increases/decreases its value by 10*/
    function increase(index){
        let inputranges = document.getElementById("input-metrics-group").getElementsByTagName('input');
        let value = parseInt(inputranges[index].value) + 10;
        value = Math.max(0, Math.min(100, value));
        inputranges[index].value = value;
        changeValues(value, index);
        setBackgroundOfBoxes();
    }

    function decrease(index) {
        let inputranges = document.getElementById("input-metrics-group").getElementsByTagName('input');
        let value = parseInt(inputranges[index].value) - 10;
        value = Math.max(0, Math.min(100, value));
        inputranges[index].value = value;
        changeValues(value, index);
        setBackgroundOfBoxes();
    }

    /* When there is a change of value of metrics importance, other values are decreased (if needed to be)
        for the sum of all importances be less than 100. */
    function changeValues(value, index) {
        let inputranges = document.getElementById("input-metrics-group").getElementsByTagName('input');
        let length = inputranges.length;
        let sum = getSumOfRangeValues();
        let overflow = sum - 100;
        if (overflow > 0) {
            for (let i = 0; i < length; i++) {
                if (i == index) continue;
                let current_value = parseInt(inputranges[i].value);
                let subtract = (overflow * current_value / 100) | 0;
                inputranges[i].value = current_value - subtract;
            }
            while (getSumOfRangeValues() > 100) {
                i = getRandomInt(length)
                if (i == index) continue;
                if (parseInt(inputranges[i].value) > 0) {
                    inputranges[i].value = parseInt(inputranges[i].value) - 1;
                }
            }
        }
        setBubbles();
        copyValuesToOtherForm(inputranges)

    }

    /* Load metrics importance values to item filter form. 
    So the importance values are part of the request even if user uses the more detailed filter */
    function copyValuesToOtherForm(inputranges){
        let group = document.getElementById("input-copy-metrics-group");
        if (group === null) return;
        let inputhiddens = document.getElementById("input-copy-metrics-group").getElementsByTagName('input');
        if ((inputhiddens== null) || (inputhiddens.length == 0)) return;
        for (let i = 0; i < inputhiddens.length; i++) {
            inputhiddens[i].value = inputranges[i].value;
        }

    }
    /* For showing values under sliders. */
    function setBubbles() {
        const allRanges = document.querySelectorAll(".range-wrap");
        allRanges.forEach(wrap => {
            const range = wrap.querySelector(".range");
            const bubble = wrap.querySelector(".bubble");
            if (bubble != null){
                range.addEventListener("input", () => {
                    setBubble(range, bubble);
                });
                setBubble(range, bubble);
            }
        });
    }
    var colors = []
    @for (int i = 0; i < Model.User.GetColors().Length; i++)
    {
        @:colors.push('@Model.User.GetColors()[i]');
    }
    setBubbles();
    setBackgroundOfBoxes();
 
    function setBubble(range, bubble) {
        const val = range.value;
        const min = range.min ? range.min : 0;
        const max = range.max ? range.max : 100;
        const newVal = Number(((val - min) * 100) / (max - min));
        bubble.innerHTML = val;

        // Sorta magic numbers based on size of the native UI thumb
        bubble.style.left = `calc(${newVal}% + (${8 - newVal * 0.15}px))`;
    }

    /* Change the colour transition in background and colour of text when using plus minus buttons. */
    function setBackgroundOfBoxes(){
        let boxes = document.getElementsByClassName("progressbox");
        let inputranges = document.getElementById("input-metrics-group").getElementsByTagName('input');
        if(boxes === null) return;
        for (let i=0; i< boxes.length;i++){
            boxes[i].style.background = 'linear-gradient(to right,' + colors[i] + ' '
                + (parseInt(inputranges[i].value) - 20) + '%, white ' + (parseInt(inputranges[i].value) + 20) + '% 100% ) ';
            if (parseInt(inputranges[i].value) > 50) {
                boxes[i].style.color = "white";
            }
            else{
                boxes[i].style.color = "black";
            }
        }
    }


    //Drag and drop
    document.addEventListener('DOMContentLoaded', (event) => {
        /* Sets the values corresponding to rank of the boxes.
            Ratio is used. When there are 3 metrics. The sum of 100 is divided in 3:2:1*/
        function set_input_hidden_values(){
            //sets right values to hidden (metrics ranking is the same as on start)
            let inputranges = document.getElementById("input-metrics-group").getElementsByTagName('input');
            let length = inputranges.length;
            //let drag_ranges = document.getElementById("input-metrics-group").getElementsByClassName('drag');
            let numberOfParts = 0;
            for (let i = 0; i < length; i++) {
                numberOfParts += i + 1;
            }
            for (let i = 0; i < length; i++) {
                let index = parseInt(inputranges[i].id.replace(/^range/, ''));
                inputranges[index].value = 100 / numberOfParts * (length - i);
            }
            copyValuesToOtherForm(inputranges) 
        }

        function handleDragStart(e) {
            this.style.opacity = '0.4';
            dragSrcEl = this;

            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/html', this.innerHTML);
        }

        function handleDragEnd(e) {
            dragboxes.forEach(function (dragbox) {
                dragbox.classList.remove('over');
                dragbox.style.opacity = '1';
            });
        }

        function handleDragOver(e) {
            e.preventDefault();
            return false;
        }

        function handleDragEnter(e) {
            this.classList.add('over');
        }

        function handleDragLeave(e) {
            this.classList.remove('over');
        }

        /* Swap the html of the dragged box and the box where the first was dragged */
        function handleDrop(e) {
            e.stopPropagation(); // stops the browser from redirecting.
            if (dragSrcEl !== this) {
                dragSrcEl.innerHTML = this.innerHTML;
                var tempColor = dragSrcEl.style.backgroundColor;
                dragSrcEl.style.backgroundColor = this.style.backgroundColor;
                this.style.backgroundColor = tempColor;
                this.innerHTML = e.dataTransfer.getData('text/html');
            }
            set_input_hidden_values()

            return false;
        }

        /* Order drag boxes of metrics when page is loaded. According to the rnaking user last used.*/
        function order_drag_boxes_at_start(){
            let drag_ranges = document.getElementById("input-metrics-group").getElementsByClassName('dragbox');
            if (drag_ranges.length==0){
                return;
            }
            let input_ranges = document.getElementById("input-metrics-group").getElementsByTagName('input');
            let temp = [];
            let values=[];
            let sorted = [];
            let backgrounds = [];
            for (let i = 0; i < drag_ranges.length; i++) {
                temp[i] = drag_ranges[i].innerHTML;
                backgrounds[i] = drag_ranges[i].style.backgroundColor
                values[i] = Number(input_ranges[i].value);
                sorted[i] = Number(input_ranges[i].value);

            }
            sorted.sort(function (a, b) { return a - b; });
            sorted=sorted.reverse();
            for (let i = 0; i < drag_ranges.length; i++) {
                let index = sorted.indexOf(values[i]);
                drag_ranges[index].innerHTML = temp[i];
                drag_ranges[index].style.backgroundColor = backgrounds[i]
                sorted[index] = -1; //next call of indexOf on the same value would return same index
            }
            set_input_hidden_values()


        }

        let dragboxes = document.querySelectorAll('.dragbox');
        dragboxes.forEach(function (item) {
            item.addEventListener('dragstart', handleDragStart);
            item.addEventListener('dragover', handleDragOver);
            item.addEventListener('dragenter', handleDragEnter);
            item.addEventListener('dragleave', handleDragLeave);
            item.addEventListener('dragend', handleDragEnd);
            item.addEventListener('drop', handleDrop);
        });
        order_drag_boxes_at_start();
    });

    var userMetricModal = document.getElementById('userMetricModal')

    /* Set modal content. Shows dialog with change of type of the metric. */
    userMetricModal.addEventListener('shown.bs.modal', function (event) {
        event.preventDefault();
        var button = event.relatedTarget
        if (button.hasAttribute('data-bs-metricid')) {
            var metricId = button.getAttribute('data-bs-metricid')
            $.ajax({
                url: '@Url.Action("UserMetricSetting","Home")' + '?metricID=' + metricId,
                cache: false,
                success: function (data) {
                    $('#userMetricModalBody').html(data);
                    $('#userMetricLabel').html($('#chooseVariantTitle')[0].innerHTML);
                    $('#chooseVariantTitle').html('');

                }
            });
        }
        else if (button.Id = 'metricsfilterhelper') {
            $.ajax({
                url: '@Url.Action("MetricsFilterHelp","Home")',
                cache: false,
                success: function (data) {
                    $('#userMetricModalBody').html(data);
                    $('#userMetricLabel').html('What is the purpose of this filter and how should I use it?');
                }
            });
        }
    })

    /* Removes modal content */
    userMetricModal.addEventListener('hide.bs.modal', function () {
        $('#userMetricModalBody').html('');
        $('#userMetricLabel').html('');
    });

    
</script>