@model WebAppForMORecSys.Models.ViewModels.MetricsFilterViewModel
@using WebAppForMORecSys.Settings;
@using WebAppForMORecSys.Helpers;
@using static WebAppForMORecSys.Helpers.JSONPropertiesHandlers.UserJSONPropertiesHandler;

<div style="display:flex; text-align:center; justify-content:center">
    <a class="btn btn-warning" id="metricsfilterhelper" data-bs-toggle="modal" data-bs-target="#userMetricModal"
    href="javascript:void(0;)">
        What is the purpose of the metrics filter below and how should I use it?
    </a>
</div>
<br />
<div class="input-group" id="input-metrics-group" >
    @{
        int index = 0;
    }
    @foreach (Metric metric in Model.Metrics.Keys)
        {
            string id = "range" + index;        
            string valueAsNumber = id + ".valueAsNumber";
       
        
        @if (Model.User.GetMetricsView() == MetricsView.DragAndDrop)
            {

                <div draggable="true" id="@("drag_" +@index)" class="drag box dragbox"
                 style="background-color: @Model.User.GetMetricIDsToColors()[metric.Id] ; width: @(100/Model.Metrics.Count - 5)%; 
                    border-radius:0.5em;">
                @if (metric.HasVariants()){
                    <a title="Set how to compute @metric.Name" data-bs-toggle="modal" data-bs-target="#userMetricModal" href="javascript:void(0;)"
                    style="color:white;" data-bs-metricid="@metric.Id">@metric.Name</a>
                }
                else
                {
                    @metric.Name
                }
                    <input class="custom-range range" type="hidden" min="0" max="100" name="MetricsImportance" id="@id"
                           value="@Model.Metrics[metric]" placeholder="MetricsImportance" />
                </div>
                
            }
        else if (Model.User.GetMetricsView() == MetricsView.PlusMinusButtons)
            {
                <div style="width:100%">
                <span class="btn btn-light progressbutton" style="border-color:  @Model.User.GetColors()[index]"
                                onclick="decrease(@index)"><b>-</b></span>
                <span id="@("box_" +@index)" class="box progressbox"
                     style="">
                    @if (metric.HasVariants())
                    {
                        <a title="Set how to compute @metric.Name" data-bs-toggle="modal" data-bs-target="#userMetricModal" href="javascript:void(0;)"
                           style="color:unset" data-bs-metricid="@metric.Id">@metric.Name</a>
                    }
                    else
                    {
                        @metric.Name
                    }
                    <input class="" type="hidden" min="0" max="100" name="MetricsImportance" id="@id"
                    value="@Model.Metrics[metric]" placeholder="MetricsImportance" />
                </span>
                <span class="btn btn-dark progressbutton" style="background-color: @Model.User.GetColors()[index]"
                                onclick="increase(@index)"><b>+</b></span>
                </div>
            }
            else
            {
            <div class="range-wrap" style="color: @Model.User.GetColors()[index]; max-width: @(100 / Model.Metrics.Count - 3)% ">
                    @if (Model.User.GetMetricsView() == MetricsView.Sliders)
                    {
                    <label for="@id">
                        @if (metric.HasVariants())
                        {
                            <a title="Set how to compute @metric.Name" data-bs-toggle="modal" data-bs-target="#userMetricModal" href="javascript:void(0;)"
                               style="color:@Model.User.GetColors()[index];" data-bs-metricid="@metric.Id">@metric.Name</a>
                        }
                        else
                        {
                            @metric.Name
                        }
                    </label>
                    <input class="custom-range range" type="range" min="0" max="100" name="MetricsImportance" id="@id"
                           value="@Model.Metrics[metric]" placeholder="MetricsImportance" oninput="changeValues(this.value, @index)"
                           
                        onchange="changeValues(this.value, @index)" />
                    <output style="background-color: @Model.User.GetColors()[index]" class="bubble"></output>
                    }
                @if (Model.User.GetMetricsView() == MetricsView.Textboxes)
                    {
                    <label for="@id">
                        @if (metric.HasVariants())
                        {
                            <a title="Set how to compute @metric.Name" data-bs-toggle="modal" data-bs-target="#userMetricModal" href="javascript:void(0;)"
                               style="color:@Model.User.GetColors()[index]" data-bs-metricid="@metric.Id">@metric.Name</a>
                        }
                        else
                        {
                            @metric.Name
                        }
                    </label>
                    <input class="custom-range range form-control rounded m-3" required type="number" min="0" max="100" name="MetricsImportance" id="@id"
                           value="@Model.Metrics[metric]"  oninput="changeValues(this.value, @index)"
                           onchange="changeValues(this.value, @index)"
                           style="border: 3px solid @Model.User.GetColors()[index];" />
                    }

                </div>
            }
            index++;
    }
    <!-- Modal for setting type of metric -->
    <div class="modal fade" id="userMetricModal" tabindex="-1" aria-labelledby="userMetricLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="userMetricLabel"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="userMetricModalBody">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    //Sets colours and bubbles that are used when used metrics view are sliders
    var colors = []
    @for (int i = 0; i < Model.User.GetColors().Length; i++)
    {
        @:colors.push('@Model.User.GetColors()[i]');
    }
    setBubbles();
    setBackgroundOfBoxes();


    /**
     * When there is a change of value of metrics importance, other values are decreased (if needed to be)
        for the sum of all importances be less than 100
     * @@param {number} value - new value
     * @@param {any} index - index of metric (objective) whose value is changed
     */
    function changeValues(value, index) {
        let inputranges = document.getElementById("input-metrics-group").getElementsByTagName('input');
        let length = inputranges.length;
        let sum = getSumOfRangeValues();
        let overflow = sum - 100;
        if (overflow > 0) {
            for (let i = 0; i < length; i++) {
                if (i == index) continue;
                let current_value = parseInt(inputranges[i].value);
                let subtract = (overflow * current_value / 100) | 0;
                inputranges[i].value = current_value - subtract;
            }
            while (getSumOfRangeValues() > 100) {
                i = getRandomInt(length)
                if (i == index) continue;
                if (parseInt(inputranges[i].value) > 0) {
                    inputranges[i].value = parseInt(inputranges[i].value) - 1;
                }
            }
        }
        setBubbles();
        copyValuesToOtherForm(inputranges)
        $.ajax({
            url: '@Url.Action("AddAct","Home", new { code = "MetricsFilterUsage" })',
            cache: false
        });
    }

    //Modal used for selecting used variant of metric
    var userMetricModal = document.getElementById('userMetricModal')

    //Drag and drop launch
    document.addEventListener('DOMContentLoaded', (event) => {
        let dragboxes = document.querySelectorAll('.dragbox');
        dragboxes.forEach(function (item) {
            item.addEventListener('dragstart', handleDragStart);
            item.addEventListener('dragover', handleDragOver);
            item.addEventListener('dragenter', handleDragEnter);
            item.addEventListener('dragleave', handleDragLeave);
            item.addEventListener('dragend', handleDragEnd);
            item.addEventListener('drop', handleDrop);
        });
        order_drag_boxes_at_start();
    });

    /**
    *  Swap the html of the dragged box and the box where the first was dragged
    */
    function handleDrop(e) {
        e.stopPropagation(); // stops the browser from redirecting.
        if (dragSrcEl !== this) {
            dragSrcEl.innerHTML = this.innerHTML;
            var tempColor = dragSrcEl.style.backgroundColor;
            dragSrcEl.style.backgroundColor = this.style.backgroundColor;
            this.style.backgroundColor = tempColor;
            this.innerHTML = e.dataTransfer.getData('text/html');
            $.ajax({
                url: '@Url.Action("AddAct","Home", new { code = "MetricsFilterUsage" })',
                cache: false
            });
        }
        set_input_hidden_values();
        let dragboxes = document.querySelectorAll('.dragbox');
        dragboxes.forEach(function (dragbox) {
            dragbox.style.opacity = '1';
        });
        return false;
    }


    /* Set modal content. Shows dialog with change of type of the metric. */
    userMetricModal.addEventListener('shown.bs.modal', function (event) {
        event.preventDefault();
        var button = event.relatedTarget
        if (button.hasAttribute('data-bs-metricid')) {
            var metricId = button.getAttribute('data-bs-metricid')
            $.ajax({
                url: '@Url.Action("UserMetricSetting","Home")' + '?metricID=' + metricId,
                cache: false,
                success: function (data) {
                    $('#userMetricModalBody').html(data);
                    $('#userMetricLabel').html($('#chooseVariantTitle')[0].innerHTML);
                    $('#chooseVariantTitle').html('');

                }
            });
        }
        else if (button.Id = 'metricsfilterhelper') {
            $.ajax({
                url: '@Url.Action("MetricsFilterHelp","Home")',
                cache: false,
                success: function (data) {
                    $('#userMetricModalBody').html(data);
                    $('#userMetricLabel').html('What is the purpose of the metrics filter and how should I use it?');
                }
            });
        }
    })

    /* Removes modal content */
    userMetricModal.addEventListener('hide.bs.modal', function () {
        $('#userMetricModalBody').html('');
        $('#userMetricLabel').html('');
    });
</script>