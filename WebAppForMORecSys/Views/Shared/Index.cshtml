@using System.Text.Json;
@using WebAppForMORecSys.Models.ViewModels
@using static WebAppForMORecSys.Settings.SystemParameters
@model WebAppForMORecSys.Models.ViewModels.MainViewModel
@{
    ViewData["Title"] = "Home Page";
    string controller = WebAppForMORecSys.Settings.SystemParameters.Controller;
    int index = 0;
    Metric[] metricsArr = Model.Metrics.Keys.ToArray();
    var loadMoreURLArguments = new
    {
        typeOfSearch = Model.FilterValues["TypeOfSearch"] ?? "",
        search = Model.SearchValue ?? "",
        director = Model.FilterValues["Director"] ?? "",
        actor = Model.FilterValues["Actor"] ?? "",
        genres = Model.FilterValues["Genres"].Split(',') ?? new string[0],
        releasedateto = Model.FilterValues["ReleaseDateTo"] ?? "",
        releasedatefrom = Model.FilterValues["ReleaseDateFrom"] ?? "",
        metricsimportance = Model.FilterValues["MetricsImportance"].Split(',') ?? new string[0]
    };
    var loadMoreURL = Url.Action("Recommendations", controller, loadMoreURLArguments);

}
@if (!string.IsNullOrEmpty(Model.Info))
{
    <div class="card bg-warning infocard ">
        <div class="card-header">
            Tip
            <button type="button" class="close bg-dark" aria-label="Close" style="float:right" title="Close tip" id="close_infocard_btn"
                onclick="close_infocard(this.id)">
                <span style="color: orange" aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="card-body" >
            @foreach (var part in @Model.Info.Replace("\\n","\n").Split('\n'))
            {
               @Html.Raw(part)<br/>
            }
            
        </div>
    </div>
}
<div id="mySidebar" class="sidebar">
    <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
    @await Html.PartialAsync("../"+controller+"/Filter")
</div>

<div id="main">
    
    <div id="openfilterbtn"><button id="openfilterbtn " class="openbtn btn" onclick="openNav()">&#9776; Open Filter</button></div>
    <div id="closefilterbtn" style="display:none"> <button class="openbtn btn" onclick="closeNav()">&#9776; Close Filter</button></div>
    <form asp-controller="Movies" asp-action="Index" method="get">
        <div class="form-floating mb-3">
            @await Html.PartialAsync("../Shared/Search")

            @if (Model.UserRatings.Where(r => (r.RatingScore > 5)).Count() >= 10){
                @await Html.PartialAsync("../Shared/MetricsFilter",  
                    new MetricsFilterViewModel{Metrics= Model.Metrics, User= Model.User})
            }
        </div>
    </form>
    <div id="DetailsDiv" style="margin-bottom:5px;"></div>
    <div id="Previews" style="width:100%">
        <div>
        @await Html.PartialAsync($"../{controller}/Recommendations", Model)
        </div>
    </div>
    <div id="loadmore_div">
        <br />
        <button id="loadmore_btn" type="button" class="btn btn-primary" style="margin:auto" onclick="loadmore()" 
            title="Load more recommendations with the same parameters">
            Load more
        </button>
        <br />
        <br />
        <div class="card bg-warning" id="loadmore_lbl" style="display:none">
            <div class="card-body">
                @if (Model.UserRatings.Where(r => (r.RatingScore > 5)).Count() >= 10)
                {
                    <h5>Get different recommendations by tweaking the objectives and clicking the "RECOMMEND" or "SEARCH" button on top of the page.</h5>
                }
                else{
                    <h5>If you rated 10 movies, you can click the "RECOMMEND" or "SEARCH" button on top of the page to get recommendations.</h5>
                }
            </div>
        </div>
    </div>
    
</div>

<script>

    function setPopover() {
        popoverExplanationOptions = {
            content: function () {
                var classname = '.popover-content' + this.id;
                return $(this).siblings(classname).html();
            },
            trigger: 'hover',
            animation: true,
            placement: 'top',
            html: true,
            title: 'Why is this item recommended?'
        };
        $('.ItemPreview').popover(popoverExplanationOptions)
    }
    var seen = [];
    var controller = '@controller';
    $(document).ready(function () {
        /*Loads possible values to autocomplete the text boxes*/
        SetAutoComplete("titlesearch", controller + "/GetAllNames");
        SetAutoComplete("idirector", controller + "/GetAllDirectors");
        SetAutoComplete("iactor", controller + "/GetAllActors");

        /* Sets flag seen for each item to false*/
        seen = $('.ItemPreview').map(function (ip) {
            return false;
        });

        
        /*sets popover for item previews*/
        $.fn.tooltip.Constructor.Default.allowList['*'].push('style')

        setPopover();

        let IDsDisplayedOnLoaded = $('.itemIDhidden');
        if ((IDsDisplayedOnLoaded.length == 0)
            || ((IDsDisplayedOnLoaded.length % @LengthOfRecommendationsList) != 0)) // No new recommendations possible
        {
            $('#loadmore_btn')[0].style.display = 'none';
        }
        
    });

    window.onscroll = function(){
        if (@((Model.UserRatings.Where(r => (r.RatingScore > 5)).Count() >= 10) ? "true" : "false")) {
            SaveSeenInteractions();
        } 
    };
    /* if scrolled check if user seen some whole preview of item that he hasn't seen before (on this loading of page)*/

    function SaveSeenInteractions() {
        var itempreviews = $('.ItemPreview')
        for (let i = 0; i < itempreviews.length; i++) {
            if (seen[i]) continue;
            var itempreviews_top = itempreviews[i].getBoundingClientRect().top;
            var itempreviews_bottom = itempreviews[i].getBoundingClientRect().bottom;
            if (isElementInView(itempreviews[i])) {
                seen[i] = true;
                var id = itempreviews[i].id.replace('preview_', '');
                $.ajax(
                    {
                        url: "Home/SetInteraction",
                        type: "POST",
                        dataType: "json",
                        data: { id: id, type: @((int)TypeOfInteraction.Seen) },
                    }
                )
            }
        }
    }

    /* Checking if the whole element can be seen by user*/
    function isElementInView(element) {
        var pageTop = $(window).scrollTop();
        var pageBottom = pageTop + $(window).height();
        var elementTop = $(element).offset().top;
        var elementBottom = elementTop + $(element).height();        
        return ((pageTop < elementTop) && (pageBottom > elementBottom));        
    }

    var loadingmore = false;

   

    function loadmore() {
        if ('Movies' == '@controller')
        {
            var url = '@Html.Raw(loadMoreURL)';
            if (!url.includes('?')) {
                url += '/?';
            }
            else{
                url += '&';
            }
            let IDsCurrentlyDisplayed = $('.itemIDhidden');
            for (let i = 0; i < IDsCurrentlyDisplayed.length; i++) {
                url += 'l=' + IDsCurrentlyDisplayed[i].value + '&';
            }
            if (!loadingmore) {
                loadingmore = true;
                $('#loadmore_btn')[0].disabled = true;
                $.ajax({
                    url: url,
                    cache: false,
                    success: function (data) {
                        $('#Previews').html($('#Previews')[0].innerHTML + data);
                        setPreviewClick();
                        setPopover();         
                        let IDsDisplayed = $('.itemIDhidden');
                        if (IDsDisplayed.length >= @(LengthOfRecommendationsList * 2))
                        {
                            $('#loadmore_lbl')[0].style.display = '';
                        }
                        if (((IDsDisplayed.length == IDsCurrentlyDisplayed.length)
                            || (IDsDisplayed.length % @LengthOfRecommendationsList != 0))//The next call wouldn't return any new recommendations
                            || ((@((Model.UserRatings.Where(r => (r.RatingScore > 5)).Count() >= 10) ? "true" : "false"))
                                && (((IDsDisplayed.length >= @(LengthOfRecommendationsList * 4)))))) // Recommender system is called and @(LengthOfRecommendationsList * 4) is maximum length of recommendations list used
                        {
                            $('#loadmore_btn')[0].style.display = 'none';
                        }
                    },
                    error: function (data) {
                        $('#loadmore_btn')[0].style.display = 'none';
                    },
                    complete: function (data) { 
                        loadingmore = false; 
                        $('#loadmore_btn')[0].disabled = false;
                    },
                });
            }
            
        }
    }
    
</script>






