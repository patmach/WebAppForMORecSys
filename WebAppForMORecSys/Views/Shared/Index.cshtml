@using System.Text.Json;
@using WebAppForMORecSys.Models.ViewModels
@using static WebAppForMORecSys.Settings.SystemParameters
@model WebAppForMORecSys.Models.ViewModels.MainViewModel
@{
    ViewData["Title"] = "Home Page";
    string controller = WebAppForMORecSys.Settings.SystemParameters.Controller;
    int index = 0;
    Metric[] metricsArr = Model.Metrics.Keys.ToArray();
}

<div id="mySidebar" class="sidebar">
    <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
    @await Html.PartialAsync("../"+controller+"/Filter")
</div>
<div id="main">
    @if (!string.IsNullOrEmpty(Model.Info)){
        <div class="card">
          <div class="card-body" style="background-color:orange">
            @Model.Info
          </div>
        </div>
    }
    <div id="openfilterbtn"><button id="openfilterbtn " class="openbtn btn" onclick="openNav()">&#9776; Open Filter</button></div>
    <div id="closefilterbtn" style="display:none"> <button class="openbtn btn" onclick="closeNav()">&#9776; Close Filter</button></div>
    <form asp-controller="Movies" asp-action="Index" method="get">
        <div class="form-floating mb-3">
            @await Html.PartialAsync("../Shared/Search")
            @await Html.PartialAsync("../Shared/MetricsFilter",  new MetricsFilterViewModel{Metrics= Model.Metrics, User= Model.User})
        </div>
    </form>
    <div id="DetailsDiv" style="margin-bottom:5px;"></div>
    <div id="Previews" style="width:100%">
    @foreach (var item in Model.Items)
    {
        Dictionary<Metric,double> metricsContribution =  null;
            
        if(Model.ItemsToMetricContributionScore!=null){
                metricsContribution = Enumerable.Range(0, Model.Metrics.Count)
                    .ToDictionary(i => metricsArr[i], i => Model.ItemsToMetricContributionScore[index][i]);
        }       
        
        @await Html.PartialAsync("../"+controller+"/Preview", new PreviewDetailViewModel(item, Model.User, Model.UserRatings, metricsContribution, Model.UsedVariants))
        @if (metricsContribution != null)
        {
                @await Html.PartialAsync("../Shared/Explanations", new PreviewDetailViewModel(item, Model.User, Model.UserRatings, metricsContribution, Model.UsedVariants))
        }
        index++;
    }
    </div>
    
</div>

<script>
    var seen = [];
    $(document).ready(function () {
        SetAutoComplete("titlesearch", "Movies/GetAllMovieNames");
        SetAutoComplete("idirector", "Movies/GetAllDirectors");
        SetAutoComplete("iactor", "Movies/GetAllActors");

        seen = $('.ItemPreview').map(function (ip) {
            return false;
        });

        
        /*popover style is not deleted*/
        $.fn.tooltip.Constructor.Default.allowList['*'].push('style')

        popoverExplanationOptions = {
            content: function () {
                var classname = '.popover-content' + this.id;
                return $(this).siblings(classname).html();
            },
            trigger: 'hover',
            animation: true,
            placement: 'top',
            html: true,
            title: 'Why is this item recommended?'
        };
        $('.ItemPreview').popover(popoverExplanationOptions)
        
    });

    window.onscroll = function(){
        SaveSeenInteractions();
    };

    function SaveSeenInteractions() {
        var itempreviews = $('.ItemPreview')
        for (let i = 0; i < itempreviews.length; i++) {
            if (seen[i]) continue;
            var itempreviews_top = itempreviews[i].getBoundingClientRect().top;
            var itempreviews_bottom = itempreviews[i].getBoundingClientRect().bottom;
            if (isElementInView(itempreviews[i])) {
                seen[i] = true;
                var id = itempreviews[i].id.replace('preview_', '');
                $.ajax(
                    {
                        url: "Home/SetInteraction",
                        type: "POST",
                        dataType: "json",
                        data: { id: id, type: @((int)TypeOfInteraction.Seen) },
                    }
                )
            }
        }
    }

    function isElementInView(element) {
        var pageTop = $(window).scrollTop();
        var pageBottom = pageTop + $(window).height();
        var elementTop = $(element).offset().top;
        var elementBottom = elementTop + $(element).height();        
        return ((pageTop < elementTop) && (pageBottom > elementBottom));        
    }
    
</script>






