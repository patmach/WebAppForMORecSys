
@using WebAppForMORecSys.Settings
@using WebAppForMORecSys.Models.ViewModels
@using static WebAppForMORecSys.Helpers.JSONPropertiesHandlers.UserJSONPropertiesHandler

@model WebAppForMORecSys.Models.ViewModels.MainViewModel
@{
    ViewData["Title"] = "Settings";
}
<div id="main">

    <h2>APP SETTINGS</h2>
    @{
        byte index = 0;
    }
    <h4 id="metricsfiltersetting">Which metrics filter do you want to use?</h4>
    <div style="display:flex; margin-bottom:3px; width:100%">
    @foreach (MetricsView value in Enum.GetValues(typeof(MetricsView))){

            string typeOfBtn = "btn-secondary";
            if (Model.User.GetMetricsView() == (MetricsView)value)
                typeOfBtn = "btn-primary";
            <a style="margin:auto" class="btn @typeOfBtn" href='@Url.Action("SetMetricsView","Home", new { metricsview=index })'>
                @value.ToFriendlyString()
            </a>
            index++;
    }
    </div>
    @await Html.PartialAsync("../Shared/MetricsFilter", new MetricsFilterViewModel{Metrics= Model.Metrics, User= Model.User})
    <br/>
    <br/>
    <br/>
    <br />
    <br />

    <h4 id="explanationtypesetting">Which type of explanations do you want to see?</h4>
    <h6>Explanation by colour(s) in preview of the movie</h6>
    <div style="display:flex; margin-bottom:3px; width:100%">
        @{
            index = 0;
        }
        @foreach (PreviewExplanationView value in Enum.GetValues(typeof(PreviewExplanationView)))
        {
            string typeOfBtn = "btn-secondary";
            if (Model.User.GetPreviewExplanationView() == (PreviewExplanationView)value)
                typeOfBtn = "btn-primary";
            <a style="margin:auto;" class="btn btn-sm @typeOfBtn" href='@Url.Action("SetPreviewExplanationView","Home", new { previewExplanationView=index })'>
                @value.ToFriendlyString()
            </a>
            index++;
        }
    </div>
    <h6>How the score values should be displayed?</h6>
    <div style="display:flex; margin-bottom:3px; width:100%">
        @{
            index = 0;
        }
        @foreach (MetricContributionScoreView value in Enum.GetValues(typeof(MetricContributionScoreView)))
        {
            string typeOfBtn = "btn-secondary";
            if (Model.User.GetMetricContributionScoreView() == (MetricContributionScoreView)value)
                typeOfBtn = "btn-primary";
            <a style="margin:auto; 
" class="btn btn-sm @typeOfBtn" href='@Url.Action("SetMetricContributionScoreView","Home", new { metricContributionScoreView=index })'>
                @value.ToFriendlyString()
            </a>
            index++;
        }        

    </div>
    <h6>Explanations of how many metrics should be displayed?</h6>
    <div style="display:flex; margin-bottom:3px; width:100%">
        @{
            index = 0;
        }
        @foreach (ExplanationView value in Enum.GetValues(typeof(ExplanationView)))
        {
            string typeOfBtn = "btn-secondary";
            if (Model.User.GetExplanationView() == (ExplanationView)value)
                typeOfBtn = "btn-primary";
            <a style="margin:auto;" class="btn @typeOfBtn" href='@Url.Action("SetExplanationView","Home", new { explanationView=index })'>
                @value.ToFriendlyString()
            </a>
            index++;
        }
    </div>
    @{
        index = 0;
    }
    <div id="Previews" style="width:100%;">
        @foreach (var item in Model.Items)
        {
            var metricsContribution = new Dictionary<Metric, double>();
            for (int j = 0; j < Model.Metrics.Count; j++)
            {
                int valueToAdd = (j == 0) ? index * 7 : (j == (Model.Metrics.Count - 1) ? index * -7 : 0);
                metricsContribution.Add(Model.Metrics.Keys.ToList()[j], 55.12 + valueToAdd);
            }

            @await Html.PartialAsync("../"+ SystemParameters.Controller + "/Preview", new PreviewDetailViewModel(item, Model.User, Model.UserRatings, metricsContribution))
            @await Html.PartialAsync("../Shared/Explanations", new PreviewDetailViewModel(item, Model.User, Model.UserRatings, metricsContribution, variants: Model.UsedVariants))

            index++;
        }
    </div>
    <br />
    <br />

    @{
        index = 0;
    }
    <h4 id="colorssetting">Choose Metric Colors</h4>
    <form asp-controller="Home" asp-action="SetMetricsColors" method="post" style="display:grid">
        <div class="input-group color-group" style="width:100%">
            @foreach (var metric in Model.Metrics.Keys)
            {
                
                string id = "metriccolor" + index;
                <span style="margin:auto">
                    <input type="color" id="@id" name="metriccolor" value="@Model.User.GetColors()[index]"/>
                    <label for="@id">@metric.Name</label>
                </span>
                index++;
            }
        </div>
        <a style="margin:auto; margin-bottom:3px;" class="btn btn-dark btn-sm" onclick="resetcolors()">Set default colors</a>
        <input  type="submit" style="margin:auto;" value="SAVE COLORS" class="btn btn-primary btn-lg" />
        
    </form>

    <br />
    <br />
    <br />
    <br />
    @{
        index = 0;
    }
    <h4 id="addblockrulesetting"">Which type of creating new block rule do you want to use?</h4>
    <div style="display:flex; margin-bottom:3px; width:100%">
        @foreach (var value in Enum.GetValues(typeof(AddBlockRuleView)))
        {
            string typeOfBtn = "btn-secondary";
            if (Model.User.GetAddBlockRuleView() == (AddBlockRuleView)value)
                typeOfBtn = "btn-primary";
            <a style="margin:auto" class="btn @typeOfBtn" href='@Url.Action("SetAddBlockRuleView","Home", new { addBlockRuleView=index })'>
                @value
            </a>
            index++;
        }
    </div>
    <div style="width:33%;background-color: #0d6efd; margin:auto;" class=" rounded">
    @await Html.PartialAsync("../"+SystemParameters.Controller + "/CreateBlockRule", 
            new UserBlockRuleViewModel{ CurrentUser=Model.User, Disabled=true})
    </div>


    <br />
    <br />
    <br />
    <br />
    @{
        index = 0;
    }
   


</div>

<script>
    /*Sets chosen colors to default ones*/
    function resetcolors(){
        let num_of_metrics = @Model.Metrics.Keys.Count;
        let colors=[];
        @for (int i = 0; i < @Model.Metrics.Keys.Count; i++)
        {
            @:colors.push('@SystemParameters.Colors[i]');
        }
        for (let i = 0; i < num_of_metrics;i++){
            let id = 'metriccolor' + i;
            metriccolor = document.getElementById(id);
            metriccolor.value = colors[i];
        }

    }

    /*Sets popover window to display properly*/
    $(document).ready(function () {
        /*popover style is not deleted*/
        $.fn.tooltip.Constructor.Default.allowList['*'].push('style')

        popoverExplanationOptions = {
        content: function () {
            var classname = '.popover-content' + this.id;
            return $(this).siblings(classname).html();
        },
        trigger: 'hover',
            animation: true,
                placement: 'top',
                    html: true,
                        title: 'Why is this item recommended?'
        };
        $('.ItemPreview').popover(popoverExplanationOptions)
    });

    /*Saves scroll position before reloading (after setting some of the paramters)*/
    window.onbeforeunload = function (e) {
        localStorage.setItem('scrollpos', window.scrollY);
    };
    
    /*After reloading scroll position is the same as before.*/
    document.addEventListener("DOMContentLoaded", function (event) {
        var scrollpos = localStorage.getItem('scrollpos');
        if (scrollpos) window.scrollTo(0, scrollpos);
    });


    
</script>

