@using WebAppForMORecSys.Settings
@using static WebAppForMORecSys.Helpers.MovieJSONPropertiesHandler
@using static WebAppForMORecSys.Helpers.UserJSONPropertiesHandler
@model WebAppForMORecSys.Models.ViewModels.PreviewDetailViewModel
@{
    //Order the metrics from the one with the biggest score to the one with lowest
    var ordered = Model.MetricsContribution.OrderBy(mc => mc.Value).Reverse().ToDictionary(mc => mc.Key, mc => mc.Value);
    var orderedMetrics = ordered.Keys.ToArray();
    var keys = orderedMetrics.Select(metric => metric.Id).ToArray();
    var values = ordered.Values.ToArray();


    string itempreviewid = "preview_" + Model.Item.Id;//Must corespond to class of main element in Preview
    string className = "popover-content" + itempreviewid;

    string borderImage = Model.MetricsContributionToBorderImage(
        Model.User.GetColors().ToList().GetRange(0, Model.MetricsContribution.Count).ToArray(),
        Model.MetricsContribution.Values.ToArray(), "right");

    //Which type of explanation should be displayed
    ExplanationView view = Model.User.GetExplanationView();
    MetricContributionScoreView metricContributionScoreView = Model.User.GetMetricContributionScoreView();

    double lastvalue = values!=null ? (values.Length>0 ? values[0] : 0) : 0;
}
@if ((view == ExplanationView.BestMetricPopover) || (view == ExplanationView.AllMetricsPopover) 
        || (view == ExplanationView.AboveAverageMetricPopover))
{
    <div class="@className popover-content" id="explanationPopover" style="display:none;">
        <div id="@className">
            @for (int i = 0; i < (ordered?.Count ?? 0); i++)
            {
                if (@values[i] == 0) break;
                if ((view == ExplanationView.BestMetricPopover) && (@values[i] != lastvalue)) break;
                if ((view == ExplanationView.AboveAverageMetricPopover) && (@values[i] <= 50)) break;
                if (metricContributionScoreView == MetricContributionScoreView.Bar)
                {
                    <div style="border-bottom:10px solid; border-image: @(Model.MetricsContributionToBorderImage(
                        new string[] {Model.User.GetMetricIDsToColors()[orderedMetrics[i].Id], "transparent"},
                        new double[] {values[i], 100-values[i]}, "right", sort: false))">
                        <p style="color: @Model.User.GetMetricIDsToColors()[keys[i]];"><b>@orderedMetrics[i].Name</b></p>
                    </div>
                }
                else{
                    <p style="color: @Model.User.GetMetricIDsToColors()[keys[i]];">
                        @if (metricContributionScoreView == MetricContributionScoreView.Percentage)
                        {
                            <b>@orderedMetrics[i].Name share - @((int)(100*values[i] / values.Sum())) % </b>
                        }
                        else if (metricContributionScoreView == MetricContributionScoreView.Raw)
                        {
                            <b>@orderedMetrics[i].Name score - @Math.Round(values[i], 2)</b>
                        }
                        else if (metricContributionScoreView == MetricContributionScoreView.HundredTimes)
                        {
                            <b>@orderedMetrics[i].Name score - @Math.Round(values[i]*100, 2)</b>
                        }
                    </p>
                }
                <p style="color: @Model.User.GetMetricIDsToColors()[keys[i]];">
                    @(Model.UsedVariants?.Where(mv => (mv !=null) && (mv?.MetricID == @orderedMetrics[i].Id)).FirstOrDefault()?.Explanation
                        ?? orderedMetrics[i].DefaultExplanation)
                </p>                
                lastvalue = values[i];
            }
        </div>
    </div>
}
<script>
    // Set popover with explanation to main preview element
    $('#@itempreviewid').on('inserted.bs.popover', function () {
        let popoverbodies = document.getElementsByClassName("popover-body");
        /*For loop is there because sometimes new popover is inserted quicker than the previous is hidden.*/ 
        for (let i=0; i<popoverbodies.length; i++){
            let popoverbody=popoverbodies[i];
            popoverbody.style.borderTop = "5px solid";
            popoverbody.style.borderImage = "@borderImage";
        }
       
    });
</script>


