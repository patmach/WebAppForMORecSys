@using System.Text;
@using static WebAppForMORecSys.Helpers.JSONPropertiesHandlers.UserJSONPropertiesHandler
@using static WebAppForMORecSys.Helpers.JSONPropertiesHandlers.MovieJSONPropertiesHandler
@using static WebAppForMORecSys.Models.ItemDomainExtension.Movie.Movie
@using WebAppForMORecSys.Settings
@model WebAppForMORecSys.Models.ViewModels.PreviewDetailViewModel
@{

    string moviePreviewID = "preview_" + Model.Item.Id; //Do not change!

    //Sets the visibility of show x hide button
    string hideDisplay = "";
    string showDisplay = "none";
    string opacity = "1";
    if (Model.User.IsItemInBlackList(Model.Item.Id))
    {
        hideDisplay = "none";
        showDisplay = "";
        opacity = "0.5";
    }

    //Sets explanation on metric contributon when its preview of a recommended movie
    string borderImage = "";
    string border = "";
    string titleColor = "";
    if ((Model.MetricsContribution != null) && (Model.MetricsContribution.Count > 0))
    {
        string typeOfBorder = "";
        PreviewExplanationView previewExplanationView = Model.User.GetPreviewExplanationView();
        if (previewExplanationView == PreviewExplanationView.TitleColor)
        {
            var keyOfMaxValue = Model.MetricsContribution.Aggregate((x, y) => x.Value > y.Value ? x : y).Key;
            titleColor = Model.User.GetMetricIDsToColors()[keyOfMaxValue.Id];
        }
        else
        {
            string direction = previewExplanationView == PreviewExplanationView.LeftBorderImage ? "bottom" : "bottom right";
            borderImage = Model.MetricsContributionToBorderImage(
                Model.User.GetColors().ToList().GetRange(0, Model.MetricsContribution.Count).ToArray()
                , Model.MetricsContribution.Values.ToArray(), direction: direction);
            borderImage = "border-image:" + borderImage;
            typeOfBorder = previewExplanationView == PreviewExplanationView.LeftBorderImage ? "border-left" : "border";
            border = $"{typeOfBorder}: 5px solid";
        }
    }
}

<div style="opacity:@opacity" class="ItemPreview horizontal @moviePreviewID" id="@moviePreviewID">
    <input class="itemIDhidden" type="hidden" id="itemIDhidden@(Model.Item.Id)" value="@(Model.Item.Id)" />
    <a href="javascript:void(0);" id='@Url.Action("Details","Movies", new { id=Model.Item.Id })' class="ajaxdetail">
        <h4 style="color: @titleColor">@Model.Item.Name</h4>
    
    <div id="logo-holder">
        @{
            string ImageURL = Model.Item.ImageURL;
            if (String.IsNullOrEmpty(ImageURL))
            {
                ImageURL = @Url.Content("~/Resources/Images/grey_no_image.png");
            }
        }
            <img class="image previewimage" style="width:95%; @border; @borderImage;" src="@ImageURL" />
        <div class="text" style="width:95%; height:100%; padding:6px;">@Model.Item.ShortDescription</div>
    </div>
    </a>
    <div>
        <a style="position: absolute; right: 1px; display:@hideDisplay" id="hideimg" class="hideimg" 
            onclick="hide(@Model.Item.Id)" href='@Url.Action("Hide","Users", new { id=Model.Item.Id })'>
            <img src="@Url.Content("~/Resources/Images/hide.png")" title="Don't recommend this movie" />
        </a>
        <a style="position: absolute; right: 1px; display:@showDisplay" id="showimg" class="showimg"
           onclick="show(@Model.Item.Id)" href='@Url.Action("Show","Users", new { id=Model.Item.Id })'>
            <img src="@Url.Content("~/Resources/Images/show.png")" title="Show this movie again." />
        </a>
    </div>
    <div style="margin-top:1px">
        <b>Director:</b>
        <br/>
        @(String.IsNullOrEmpty(Model.Item.GetDirector()) ? "-" : Model.Item.GetDirector())
        
    </div>
    @await Html.PartialAsync("../Movies/Rating", Model)

</div>





